{"version":3,"sources":["components/flat.js","components/marker.js","App.js","serviceWorker.js","index.js"],"names":["Flat","handleClick","props","selectFlat","flat","title","this","price","priceCurrency","name","style","backgroundImage","imageUrl","className","onClick","React","Component","Marker","classes","selected","text","App","console","log","setState","selectedFlat","handleSearch","event","search","target","value","flats","state","allFlats","filter","RegExp","exec","fetch","then","response","json","data","center","lat","lng","type","placeholder","onChange","map","key","bootstrapURLKeys","zoom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAkCeA,G,uNAxBbC,YAAc,WACZ,EAAKC,MAAMC,WAAW,EAAKD,MAAME,O,wEAIjC,IAAMC,EAAQC,KAAKJ,MAAME,KAAKG,MAC5BD,KAAKJ,MAAME,KAAKI,cAChB,MAAQF,KAAKJ,MAAME,KAAKK,KAEpBC,EAAQ,CAChBC,gBAAgB,QAAD,OAAUL,KAAKJ,MAAME,KAAKQ,SAA1B,OAGb,OAEE,yBAAKC,UAAU,OAAOC,QAASR,KAAKL,aACxC,yBAAKY,UAAU,eAAeH,MAAOA,IACrC,yBAAKG,UAAU,cACdR,Q,GAnBgBU,IAAMC,Y,iBCQVC,G,uLAZZ,IAAIC,EAAU,SAIb,OAHGZ,KAAKJ,MAAMiB,WACdD,GAAW,YAGT,yBAAKL,UAAWK,GACnBZ,KAAKJ,MAAMkB,U,GAROL,IAAMC,YCiGZK,E,YA5Fb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAqBRC,WAAa,SAACC,GACZkB,QAAQC,IAAInB,GACZ,EAAKoB,SAAS,CACZC,aAAcrB,KAzBC,EA8BnBsB,aAAe,SAACC,GACd,EAAKH,SAAS,CACZI,OAAQD,EAAME,OAAOC,MACrBC,MAAO,EAAKC,MAAMC,SAASC,QAAO,SAAC9B,GAAD,OAAU,IAAI+B,OAAOR,EAAME,OAAOC,MAAO,KAAKM,KAAKhC,EAAKK,YA/B5F,EAAKuB,MAAQ,CACXD,MAAO,GACPE,SAAU,GACVR,aAAc,KACdG,OAAQ,IANO,E,iFAUE,IAAD,OAElBS,MADY,iFAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,EAAKjB,SAAS,CACZO,MAAOU,EACPR,SAAUQ,S,+BAoBR,IAAD,OAEHC,EAAS,CACXC,IAAK,UACLC,IAAK,UAUP,OAPItC,KAAK0B,MAAMP,eACbiB,EAAS,CACPC,IAAKrC,KAAK0B,MAAMP,aAAakB,IAC7BC,IAAKtC,KAAK0B,MAAMP,aAAamB,MAK/B,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,UACf,2BAAOgC,KAAK,OACZC,YAAY,SACZhB,MAAOxB,KAAK0B,MAAMJ,OAClBmB,SAAUzC,KAAKoB,gBAEf,yBAAKb,UAAU,SAChBP,KAAK0B,MAAMD,MAAMiB,KAAI,SAAC5C,GACrB,OAAO,kBAAC,EAAD,CACL6C,IAAK7C,EAAKK,KACVL,KAAMA,EACND,WAAY,EAAKA,kBAIzB,yBAAKU,UAAU,OACZ,kBAAC,IAAD,CACGqC,iBAAmB,CAAED,IAAK,2CAC1BP,OAAQA,EACRS,KAAM,IAEP7C,KAAK0B,MAAMD,MAAMiB,KAAI,SAAC5C,GACrB,OAAO,kBAAC,EAAD,CACP6C,IAAK7C,EAAKK,KACVkC,IAAKvC,EAAKuC,IACVC,IAAKxC,EAAKwC,IACVxB,KAAMhB,EAAKG,MAAM,SACjBY,SAAUf,IAAS,EAAK4B,MAAMP,yB,GAlFtBT,aCKEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.4add29b8.chunk.js","sourcesContent":["import React from 'react';\nimport \"./flat.css\";\n\n// const flat = {\n// \tname: \"Great flat\",\n// \tprice: 100,\n// \t//etc\n// }\n\nclass Flat extends React.Component {\n  handleClick = () => {\n    this.props.selectFlat(this.props.flat);\n  }\n  render() {\n\n    const title = this.props.flat.price +\n      this.props.flat.priceCurrency +\n      \" - \" + this.props.flat.name;\n\n    const style = {\n\t\tbackgroundImage: `url('${this.props.flat.imageUrl}')`\n    };\n\n    return (\n\n      <div className=\"flat\" onClick={this.handleClick}>\n\t\t<div className=\"flat-picture\" style={style}></div>\n\t\t<div className=\"flat-title\">\n\t\t{title}</div>\n\t  </div>\n    );\n  }\n}\n\nexport default Flat;","import React from \"react\";\nimport './marker.css'\n\nclass Marker extends React.Component {\n  render() {\n  \tlet classes = \"marker\";\n  \tif (this.props.selected) {\n  \t\tclasses += \"selected\";\n  \t}\n    return (\n      <div className={classes}>\n\t\t{this.props.text}\n      </div>\n    );\n  }\n}\n\nexport default Marker;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Flat from './components/flat';\nimport GoogleMapReact from 'google-map-react';\nimport Marker from './components/marker';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flats: [],\n      allFlats: [],\n      selectedFlat: null,\n      search: \"\"\n    };\n  }\n\n  componentDidMount() {\n    const url = \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/flats.json\";\n    fetch(url)\n      .then(response => response.json())\n      .then((data) => {\n        this.setState({\n          flats: data,\n          allFlats: data\n        });\n      })\n  }\n\n  selectFlat = (flat) => {\n    console.log(flat);\n    this.setState({\n      selectedFlat: flat\n    })\n  }\n\n\n  handleSearch = (event) => {\n    this.setState({\n      search: event.target.value,\n      flats: this.state.allFlats.filter((flat) => new RegExp(event.target.value, \"i\").exec(flat.name))\n    });\n  }\n\n  render() {\n\n    let center = {\n      lat: 48.864716,\n      lng: 2.349014\n    }\n\n    if (this.state.selectedFlat) {\n      center = {\n        lat: this.state.selectedFlat.lat,\n        lng: this.state.selectedFlat.lng\n      }\n    }\n\n    return (\n      <div className=\"app\">\n        <div className=\"main\">\n          <div className=\"search\">\n          <input type=\"text\"\n          placeholder=\"Search\"\n          value={this.state.search}\n          onChange={this.handleSearch}/>\n            </div>\n          <div className=\"flats\">\n        {this.state.flats.map((flat) => {\n          return <Flat \n            key={flat.name} \n            flat={flat} \n            selectFlat={this.selectFlat} />\n        })}\n            </div>\n        </div>\n    <div className=\"map\">\n       <GoogleMapReact\n          bootstrapURLKeys ={{ key: \"AIzaSyBz7sAGeKe5Q8gVSNdZ_EnmYpbLmSCrPLM\" }}\n          center={center}\n          zoom={14}\n        >\n        {this.state.flats.map((flat) => {\n          return <Marker \n          key={flat.name} \n          lat={flat.lat} \n          lng={flat.lng} \n          text={flat.price+\"â‚¬\"}\n          selected={flat === this.state.selectedFlat} />\n        })}\n        </GoogleMapReact>\n    </div> \n    </div>\n\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}